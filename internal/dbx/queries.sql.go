// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package dbx

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  user_id, bank, display_name
) VALUES (
  $1::bigint, $2::text, $3::text
) RETURNING id, user_id, display_name, bank, created_at, updated_at
`

type CreateAccountParams struct {
	UserID      int64
	Bank        string
	DisplayName string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Bank, arg.DisplayName)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.Bank,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, username, encrypted_password
) VALUES (
  $1::text, $2::text, $3::text
) RETURNING id, username, name, encrypted_password, created_at, updated_at
`

type CreateUserParams struct {
	Name              string
	Username          string
	EncryptedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Username, arg.EncryptedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1::bigint AND user_id = $2::bigint
`

type DeleteAccountParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const fetchUserByUsername = `-- name: FetchUserByUsername :one
SELECT u.id, u.username, u.name, u.encrypted_password, u.created_at, u.updated_at
  FROM users u
  WHERE u.username = $1::text LIMIT 1
`

func (q *Queries) FetchUserByUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, user_id, display_name, bank, created_at, updated_at
  FROM accounts a
  WHERE a.user_id = $1::bigint
  ORDER BY COALESCE(a.display_name, a.bank) ASC
  LIMIT $3::int
  OFFSET $2::int
`

type ListAccountsParams struct {
	UserID     int64
	PageOffset int32
	PageLimit  int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.UserID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DisplayName,
			&i.Bank,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
